npm install bcrypt dotenv express express-handlebars jsonwebtoken pg nodemon
https://www.toptal.com/developers/gitignore/
"scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  // Importar la librer√≠a 'pg' y dotenv para manejar variables de entorno
const { Pool } = require("pg");
require("dotenv").config();

// Crear una nueva instancia de Pool para manejar la conexi√≥n a la base de datos
const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

// Probar la conexi√≥n al inicializar
pool.connect((err, client, release) => {
  if (err) {
    console.error("‚ùå Error al conectar a la base de datos:", err.message);
  } else {
    console.log("‚úÖ Conexi√≥n exitosa a la base de datos PostgreSQL");
  }
  // Liberar el cliente si se ha establecido correctamente
  if (release) release();
});

// Exportar el pool para que pueda ser reutilizado en otros m√≥dulos
module.exports = pool;

PORT=3000
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=123456789
DB_NAME=techworld
JWT_SECRET=clave_secreta_super_segura

// Importar dependencias
const express = require("express");
const dotenv = require("dotenv");

// Cargar variables de entorno
dotenv.config();

// Importar el archivo de conexi√≥n a la base de datos
const db = require("./models/db");

// Inicializar la aplicaci√≥n
const app = express();

// Middleware para parsear JSON y datos de formularios
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Ruta de ejemplo
app.get("/", (req, res) => {
  res.send("Bienvenido a TechWorld Learning Platform");
});

// Ruta de prueba para verificar conexi√≥n a la base de datos
app.get("/db-test", async (req, res) => {
  try {
    const result = await db.query("SELECT NOW()");
    res.status(200).send(`Conexi√≥n exitosa: ${result.rows[0].now}`);
  } catch (error) {
    console.error("Error al realizar consulta:", error.message);
    res.status(500).send("Error al conectar con la base de datos.");
  }
});

// Configuraci√≥n del puerto
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Servidor ejecut√°ndose en http://localhost:${PORT}`);
});



// Conexi√≥n a la base de datos
const db = require("./db");

// Crear tabla Usuario si no existe
const createTableUsuario = async () => {
  const query = `
    CREATE TABLE IF NOT EXISTS Usuario (
      id SERIAL PRIMARY KEY,
      nombre VARCHAR(100) NOT NULL,
      correo VARCHAR(100) UNIQUE NOT NULL,
      contrasena VARCHAR(255) NOT NULL,
      rol VARCHAR(50) NOT NULL,
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;

  try {
    await db.query(query);
    console.log("Tabla Usuario creada correctamente");
  } catch (error) {
    console.error("Error al crear la tabla Usuario:", error.message);
  }
};

// Ejecutar la creaci√≥n de la tabla
createTableUsuario();

// Conexi√≥n a la base de datos
const db = require("./db");

// Crear tabla Curso si no existe
const createTableCurso = async () => {
  const query = `
    CREATE TABLE IF NOT EXISTS Curso (
      id SERIAL PRIMARY KEY,
      titulo VARCHAR(100) NOT NULL,
      descripcion TEXT NOT NULL,
      duracion INT NOT NULL,
      instructor_id INT NOT NULL REFERENCES Usuario(id),
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;

  try {
    await db.query(query);
    console.log("Tabla Curso creada correctamente");
  } catch (error) {
    console.error("Error al crear la tabla Curso:", error.message);
  }
};

// Ejecutar la creaci√≥n de la tabla
createTableCurso();
// Conexi√≥n a la base de datos
const db = require("./db");

// Crear tabla Inscripcion si no existe
const createTableInscripcion = async () => {
  const query = `
    CREATE TABLE IF NOT EXISTS Inscripcion (
      id SERIAL PRIMARY KEY,
      estudiante_id INT NOT NULL REFERENCES Usuario(id),
      curso_id INT NOT NULL REFERENCES Curso(id),
      progreso INT DEFAULT 0,
      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;

  try {
    await db.query(query);
    console.log("Tabla Inscripcion creada correctamente");
  } catch (error) {
    console.error("Error al crear la tabla Inscripcion:", error.message);
  }
};

// Ejecutar la creaci√≥n de la tabla
createTableInscripcion();
// Importar modelos
require("./models/usuario");
require("./models/curso");
require("./models/inscripcion");

